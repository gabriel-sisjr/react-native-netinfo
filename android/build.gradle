import groovy.json.JsonSlurper

buildscript {
  // The Android Gradle plugin is only required when opening the android folder stand-alone.
  // This avoids unnecessary downloads and potential conflicts when the library is included as a
  // module dependency in an application project.
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }

    dependencies {
      classpath("com.android.tools.build:gradle:7.4.2")
    }
  }
}

def readRnVersion() {
  def f = new File(rootProject.projectDir, "../node_modules/react-native/package.json")
  return f.exists() ? new JsonSlurper().parseText(f.text).version as String : "0.0.0"
}

def rnVersion = readRnVersion()

static boolean isRNV74OrNewer(String v) {
  def m = (v =~ /(\d+)\.(\d+)\.(\d+)/); if (!m.matches()) return false
  def (maj, min, pat) = [m[0][1], m[0][2], m[0][3]].collect { it as int }
  return (maj > 0) || (maj == 0 && (min > 74 || (min == 74 && pat >= 0)))
}

def rn74plus = isRNV74OrNewer(rnVersion)

def getExtOrInitialValue(name, initialValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : initialValue
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNativeNetInfo_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNativeNetInfo_' + name]).toInteger()
}

apply plugin: 'com.android.library'

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
  // Check AGP version for backward compatibility reasons
  if (agpVersion.tokenize('.')[0].toInteger() >= 7) {
    namespace = "com.reactnativecommunity.netinfo"
  }

  compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')

    buildConfigField "boolean", "IS_RN_74_OR_NEWER", rn74plus.toString()
  }

  lintOptions{
    abortOnError false
  }
}

repositories {
  maven {
    // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm

    // Use node resolver to locate react-native package
    def reactNativePackage = file(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim())
    if (reactNativePackage.exists()) {
      url "$reactNativePackage.parentFile/android"
    }
    // Fallback to react-native package colocated in node_modules
    else {
      url "$rootDir/../node_modules/react-native/android"
    }
  }
  google()
  mavenLocal()
  mavenCentral()
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'

}
